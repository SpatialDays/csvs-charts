# Default values for geoserver.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ivicamaticsd/csvs-geoserver
  tag: "latest"
  pullPolicy: Always

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
#  annotations:
#    kubernetes.io/ingress.class: "nginx"
#    # kubernetes.io/tls-acme: "true"
#    # nginx.ingress.kubernetes.io/rewrite-target: /
#    # nginx.ingress.kubernetes.io/add-base-url: "true"
#  hosts:
#    - host: dev-csvs.sa-catapult.co.uk
#      paths:
#        - path: /geoserver
#  tls: []
#  #  - secretName: chart-example-tls
#  #    hosts:
#  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

sidecar:
  image:
    repository: satapps/geoserver-commands
    tag: 0.8
    pullPolicy: IfNotPresent

backup:
  enabled: false
  repository: satapps/geoserver-backup
  tag: "sha-be266da"
  pullPolicy: IfNotPresent
  ttlSecondsAfterFinished: 3600
  s3url: http://s3-uk-1.sa-catapult.co.uk
  s3bucket: csvs-backups
  namespace: dev-csvs

geoserverUsername: test_user
geoserverPassword: test_password
awsAccessKeyId: test
awsSecretAccessKey: test

pvc:
  webinf:
    name: geoserver-webinf
    storageClassName: geoserver-webinf-data-pvc-storage-class
  vectors:
    name: geoserver-vectors
    storageClassName: geoserver-vectors-data-pvc-storage-class
  rasters:
    name: geoserver-rasters
    storageClassName: geoserver-rasters-data-pvc-storage-class
  remoteData:
    name: geoserver-remote-data
    storageClassName: geoserver-remote-data-pvc-storage-class
    
  

# pvc:
#   remote:
#     storageClassName: portworx-csi-sc-retain
#     namespace: dev-csvs
#     name: geoserver
#   rasters:
#     enabled: false
#     name: geoserver-rasters

# livenessProbe:
#   enabled: true
#   initialDelaySeconds: 60
#   periodSeconds: 10
#   timeoutSeconds: 5
#   failureThreshold: 6
#   successThreshold: 1

# readinessProbe:
#   enabled: true

## Role Based Access for a ServiceAccount
## ref: https://kubernetes.io/docs/admin/authorization/rbac/
##
rbac:
  ## Specifies whether RBAC rules should be created
  ## binding GeoServer ServiceAccount to a role
  ## that allows GeoServer pods querying the K8s API
  ##
  create: true

# postgres:
#   postgresqlUsername: geoserver
#   postgresqlPassword: supersecret
#   awsAccessKeyId: test
#   awsSecretAccessKey: test
#   s3url: http://s3-uk-1.sa-catapult.co.uk
#   s3bucket: csvs-backups
#   namespace: dev-csvs
